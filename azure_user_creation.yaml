- name: Azure User Creation with First Available Username
  hosts: localhost
  gather_facts: no
  vars:
    # Service credentials
    tenant_id: "195e8969-c853-47b4-83d0-36e044d83923"
    client_id: "e2e46ae3-2dee-4eed-a074-ddffd760ab2b"
    client_secret: "PQZ8Q~XSmMsU4dbgk2KyWMHK1h8X7ciD~H.1_csi"
    
    # User details
    default_user_name: "VidyaRa"
    default_mail_nickname: "vidya"
    domain_name: "amitomar63gmail.onmicrosoft.com"
    
    # API endpoints
    graph_api_endpoint: "https://graph.microsoft.com/v1.0"
    
    # Search range
    start_number: 1
    max_number: 100
    
  tasks:
    # Get the Azure auth token
    - name: Get Azure access token
      uri:
        url: "https://login.microsoftonline.com/{{ tenant_id }}/oauth2/v2.0/token"
        method: POST
        body:
          client_id: "{{ client_id }}"
          client_secret: "{{ client_secret }}"
          scope: "https://graph.microsoft.com/.default"
          grant_type: "client_credentials"
        body_format: form-urlencoded
        return_content: yes
      register: azure_auth_response

    - name: Set Azure token
      set_fact:
        access_token: "{{ azure_auth_response.json.access_token }}"
    
    # Custom script that does everything in one task
    - name: Find first available username and create user
      shell: |
        #!/bin/bash
        # Script to find first available username and create Azure AD user
        
        # Variables
        ACCESS_TOKEN="{{ access_token }}"
        BASE_NAME="{{ default_mail_nickname }}"
        DOMAIN="{{ domain_name }}"
        DISPLAY_NAME="{{ default_user_name }}"
        START_NUM={{ start_number }}
        MAX_NUM={{ max_number }}
        GRAPH_API="{{ graph_api_endpoint }}"
        
        # Function to check if username exists
        check_username() {
          local num=$1
          local username="${BASE_NAME}${num}@${DOMAIN}"
          
          # Make API call to check if user exists
          status_code=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            "${GRAPH_API}/users/${username}")
          
          echo "Checking ${username} - Status: ${status_code}"
          
          # Return true (0) if username is available (404), false (1) otherwise
          if [ "$status_code" == "404" ]; then
            return 0
          else
            return 1
          fi
        }
        
        # Function to create user
        create_user() {
          local nickname=$1
          local username="${nickname}@${DOMAIN}"
          
          # Create JSON payload
          json_payload=$(cat <<EOF
        {
          "accountEnabled": true,
          "displayName": "${DISPLAY_NAME}",
          "mailNickname": "${nickname}",
          "userPrincipalName": "${username}",
          "passwordProfile": {
            "forceChangePasswordNextSignIn": true,
            "password": "Default@1234"
          }
        }
        EOF
        )
          
          # Make API call to create user
          response=$(curl -s \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$json_payload" \
            -X POST \
            "${GRAPH_API}/users")
          
          echo "User creation response: $response"
          echo "AVAILABLE_USERNAME=${username}" > /tmp/username_result.txt
        }
        
        # Main loop to find available username
        for ((i=${START_NUM}; i<=${MAX_NUM}; i++)); do
          if check_username $i; then
            echo "Found available username: ${BASE_NAME}${i}@${DOMAIN}"
            create_user "${BASE_NAME}${i}"
            exit 0
          fi
        done
        
        echo "No available username found after checking ${MAX_NUM} options"
        exit 1
      args:
        executable: /bin/bash
      register: username_search_result
      
    - name: Debug script result
      debug:
        msg: "{{ username_search_result.stdout_lines }}"
