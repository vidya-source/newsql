Here's the complete Ansible script with your original code plus the continuation for checking license availability and updating ServiceNow requests:

```yaml
- name: Fetch Pending ServiceNow Requests
  hosts: localhost
  gather_facts: no
  vars:
    servicenow_instance: "https://dev247928.service-now.com"
    servicenow_username: "admin"
    servicenow_password: "%ml4Vs9RXE/s"
    servicenow_table: "sc_request"
    tenant_id: "195e8969-c853-47b4-83d0-36e044d83923"
    client_id: "e2e46ae3-2dee-4eed-a074-ddffd760ab2b"
    client_secret: "{{client_secret}}"
    graph_api_endpoint: "https://graph.microsoft.com/v1.0"
    
  tasks:
    - name: Fetch pending requests from ServiceNow
      uri:
        url: "{{ servicenow_instance }}/api/now/table/{{ servicenow_table }}"
        method: GET
        user: "{{ servicenow_username }}"
        password: "{{ servicenow_password }}"
        force_basic_auth: yes
        return_content: yes
      register: servicenow_response
    - name: Display request details
      debug:
        msg: |
          {% for request in servicenow_response.json.result %}
          Request Number: {{ request.get('number', 'N/A') }}
          User ID (Requested For): {{ request.get('requested_for', {}).get('value', 'Unknown') }}
          User ID (Opened By): {{ request.get('opened_by', {}).get('value', 'Unknown') }}
          Requested License Type: {{ request.get('short_description', 'Not Provided') }}
          Description: {{ request.get('description', 'Not Provided') }}
          ------------------------------------------------
          {% endfor %}
          
    - name: Get Azure access token
      uri:
        url: "https://login.microsoftonline.com/{{ tenant_id }}/oauth2/v2.0/token"
        method: POST
        body:
          client_id: "{{ client_id }}"
          client_secret: "{{ client_secret }}"
          scope: "https://graph.microsoft.com/.default"
          grant_type: "client_credentials"
        body_format: form-urlencoded
        return_content: yes
      register: azure_auth_response
    - name: Set Azure token
      set_fact:
        access_token: "{{ azure_auth_response.json.access_token }}"
    
    - name: Check License Availability in Azure
      uri:
        url: "{{ graph_api_endpoint }}/subscribedSkus"
        method: GET
        headers:
          Authorization: "Bearer {{ access_token }}"
          Content-Type: "application/json"
        return_content: yes
      register: azure_license_response
    
    - name: Add dummy license data for testing (remove this after u have real lic)
      set_fact:
        azure_license_response:
          json:
            value:
              - id: "dummy-license-1"
                skuPartNumber: "TEST_LICENSE_1"
                prepaidUnits:
                  enabled: 5
                consumedUnits: 3
              - id: "dummy-license-2"
                skuPartNumber: "TEST_LICENSE_2"
                prepaidUnits:
                  enabled: 10
                consumedUnits: 7  
    
    - name: Display license availability
      debug:
        msg: "Available Licenses: {{ azure_license_response.json }}"      

    - name: Process each ServiceNow request
      loop: "{{ servicenow_response.json.result }}"
      vars:
        current_request: "{{ item }}"
        requested_license_type: "{{ item.short_description }}"
      block:
        - name: Check if requested license is available
          set_fact:
            license_info: >-
              {{ azure_license_response.json.value | selectattr('skuPartNumber', 'equalto', requested_license_type) | list | first | default({}) }}
            is_license_available: >-
              {% set license = azure_license_response.json.value | selectattr('skuPartNumber', 'equalto', requested_license_type) | list | first | default({}) %}
              {% if license and license.prepaidUnits is defined and license.consumedUnits is defined %}
                {% set available = license.prepaidUnits.enabled - license.consumedUnits %}
                {{ available > 0 }}
              {% else %}
                false
              {% endif %}
          
        - name: Set approval state based on license availability
          set_fact:
            approval_state: "{{ 'approved' if is_license_available | bool else 'rejected' }}"
            approval_message: "{{ 'License is available' if is_license_available | bool else 'No licenses available for the requested type' }}"
        
        - name: Update ServiceNow request with approval decision
          uri:
            url: "{{ servicenow_instance }}/api/now/table/{{ servicenow_table }}/{{ current_request.sys_id }}"
            method: PATCH
            user: "{{ servicenow_username }}"
            password: "{{ servicenow_password }}"
            force_basic_auth: yes
            body_format: json
            body:
              approval: "{{ approval_state }}"
              work_notes: "{{ approval_message }}"
            status_code: 200
          register: update_response
        
        - name: Log the update results
          debug:
            msg: "Updated request {{ current_request.number }} to {{ approval_state }} - Response: {{ update_response.status }}"

    - name: Generate summary report
      debug:
        msg: |
          License Request Processing Summary:
          --------------------------------------
          Total Requests: {{ servicenow_response.json.result | length }}
          Approved: {{ servicenow_response.json.result | selectattr('approval', 'equalto', 'approved') | list | length }}
          Rejected: {{ servicenow_response.json.result | selectattr('approval', 'equalto', 'rejected') | list | length }}
