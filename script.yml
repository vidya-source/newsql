---
- name: Fetch Pending ServiceNow Requests
  hosts: localhost
  gather_facts: no
  vars:
    servicenow_instance: "https://dev247928.service-now.com"
    servicenow_username: "admin"
    servicenow_password: "%ml4Vs9RXE/s"
    servicenow_table: "sc_request"
    tenant_id: "195e8969-c853-47b4-83d0-36e044d83923"
    client_id: "e2e46ae3-2dee-4eed-a074-ddffd760ab2b"
    client_secret: "{{client_secret}}"
    graph_api_endpoint: "https://graph.microsoft.com/v1.0"
    
  tasks:
    - name: Fetch pending requests from ServiceNow
      uri:
        url: "{{ servicenow_instance }}/api/now/table/{{ servicenow_table }}"
        method: GET
        user: "{{ servicenow_username }}"
        password: "{{ servicenow_password }}"
        force_basic_auth: yes
        return_content: yes
      register: servicenow_response
    - name: Display request details
      debug:
        msg: |
          {% for request in servicenow_response.json.result %}
          Request Number: {{ request.get('number', 'N/A') }}
          User ID (Requested For): {{ request.get('requested_for', {}).get('value', 'Unknown') }}
          User ID (Opened By): {{ request.get('opened_by', {}).get('value', 'Unknown') }}
          Requested License Type: {{ request.get('short_description', 'Not Provided') }}
          Description: {{ request.get('description', 'Not Provided') }}
          ------------------------------------------------
          {% endfor %}
          
    - name: Get Azure access token
      uri:
        url: "https://login.microsoftonline.com/{{ tenant_id }}/oauth2/v2.0/token"
        method: POST
        body:
          client_id: "{{ client_id }}"
          client_secret: "{{ client_secret }}"
          scope: "https://graph.microsoft.com/.default"
          grant_type: "client_credentials"
        body_format: form-urlencoded
        return_content: yes
      register: azure_auth_response
    - name: Set Azure token
      set_fact:
        access_token: "{{ azure_auth_response.json.access_token }}"
    
    - name: Check License Availability in Azure
      uri:
        url: "{{ graph_api_endpoint }}/subscribedSkus"
        method: GET
        headers:
          Authorization: "Bearer {{ access_token }}"
          Content-Type: "application/json"
        return_content: yes
      register: azure_license_response
    
    - name: Add dummy license data for testing (remove this after u have real lic)
      set_fact:
        azure_license_response:
          json:
            value:
              - id: "dummy-license-1"
                skuPartNumber: "TEST_LICENSE_1"
                prepaidUnits:
                  enabled: 5
                consumedUnits: 3
              - id: "dummy-license-2"
                skuPartNumber: "TEST_LICENSE_2"
                prepaidUnits:
                  enabled: 10
                consumedUnits: 7  
    
    - name: Display license availability
      debug:
        msg: "Available Licenses: {{ azure_license_response.json }}"
        
    # New tasks for approval workflow
    - name: Fetch pending approvals from ServiceNow
      uri:
        url: "{{ servicenow_instance }}/api/now/table/sysapproval_approver?sysparm_query=state=requested"
        method: GET
        user: "{{ servicenow_username }}"
        password: "{{ servicenow_password }}"
        force_basic_auth: yes
        return_content: yes
      register: pending_approvals
      
    - name: Display pending approvals
      debug:
        msg: |
          Pending Approvals:
          {% for approval in pending_approvals.json.result %}
          Approval ID: {{ approval.sys_id }}
          Document ID: {{ approval.document_id }}
          Approver: {{ approval.approver.display_value }}
          ------------------------------------------------
          {% endfor %}
    
    - name: Process approvals
      block:
        - name: Set up a loop for each pending approval
          set_fact:
            current_approval: "{{ item }}"
          loop: "{{ pending_approvals.json.result }}"
          register: approval_loop
          
        - name: Get detailed request information
          uri:
            url: "{{ servicenow_instance }}/api/now/table/{{ servicenow_table }}/{{ current_approval.document_id }}"
            method: GET
            user: "{{ servicenow_username }}"
            password: "{{ servicenow_password }}"
            force_basic_auth: yes
            return_content: yes
          register: request_details
          loop: "{{ approval_loop.results }}"
          loop_control:
            loop_var: current_loop_item
          vars:
            current_approval: "{{ current_loop_item.ansible_facts.current_approval }}"
            
        - name: Check license availability for this request
          set_fact:
            license_available: >-
              {% set requested_license = current_loop_item.request_details.json.result.short_description | default('') %}
              {% set available = false %}
              {% for license in azure_license_response.json.value %}
                {% if license.skuPartNumber in requested_license and (license.prepaidUnits.enabled - license.consumedUnits) > 0 %}
                  {% set available = true %}
                {% endif %}
              {% endfor %}
              {{ available }}
          loop: "{{ approval_loop.results }}"
          loop_control:
            loop_var: current_loop_item
          register: license_check_results
            
        - name: Decide on approval based on license availability
          set_fact:
            approval_decision: "{{ 'approved' if current_loop_item.ansible_facts.license_available else 'rejected' }}"
          loop: "{{ license_check_results.results }}"
          loop_control:
            loop_var: current_loop_item
          register: approval_decisions
            
        - name: Update approval status in ServiceNow
          uri:
            url: "{{ servicenow_instance }}/api/now/table/sysapproval_approver/{{ current_loop_item.ansible_facts.current_approval.sys_id }}"
            method: PATCH
            user: "{{ servicenow_username }}"
            password: "{{ servicenow_password }}"
            body_format: json
            body:
              state: "{{ current_loop_item.ansible_facts.approval_decision }}"
              comments: "{{ 'Automatically approved - license available' if current_loop_item.ansible_facts.approval_decision == 'approved' else 'Automatically rejected - license not available' }}"
            force_basic_auth: yes
            status_code: 200
            headers:
              Content-Type: "application/json"
          loop: "{{ approval_decisions.results }}"
          loop_control:
            loop_var: current_loop_item
          register: approval_updates
            
        - name: Update request status in ServiceNow
          uri:
            url: "{{ servicenow_instance }}/api/now/table/{{ servicenow_table }}/{{ current_loop_item.ansible_facts.current_approval.document_id }}"
            method: PATCH
            user: "{{ servicenow_username }}"
            password: "{{ servicenow_password }}"
            body_format: json
            body:
              state: "{{ '3' if current_loop_item.ansible_facts.approval_decision == 'approved' else '4' }}"  # 3=Approved, 4=Rejected
              comments: "{{ 'License request was approved' if current_loop_item.ansible_facts.approval_decision == 'approved' else 'License request was rejected - no available licenses' }}"
            force_basic_auth: yes
            status_code: 200
            headers:
              Content-Type: "application/json"
          loop: "{{ approval_decisions.results }}"
          loop_control:
            loop_var: current_loop_item
          register: request_updates
      when: pending_approvals.json.result | length > 0
    
    - name: Provision license if approved
      block:
        - name: Get user details for approved requests
          uri:
            url: "{{ servicenow_instance }}/api/now/table/sys_user/{{ item.ansible_facts.current_approval.document_id }}"
            method: GET
            user: "{{ servicenow_username }}"
            password: "{{ servicenow_password }}"
            force_basic_auth: yes
            return_content: yes
          loop: "{{ approval_decisions.results }}"
          loop_control:
            label: "Processing user for {{ item.ansible_facts.current_approval.document_id }}"
          when: item.ansible_facts.approval_decision == 'approved'
          register: user_details
    
        - name: Assign license in Azure for approved requests
          uri:
            url: "{{ graph_api_endpoint }}/users/{{ item.json.result.email }}/assignLicense"
            method: POST
            headers:
              Authorization: "Bearer {{ access_token }}"
              Content-Type: "application/json"
            body_format: json
            body:
              addLicenses:
                - skuId: "{{ azure_license_response.json.value | selectattr('skuPartNumber', 'in', item.json.result.short_description) | map(attribute='id') | first }}"
              removeLicenses: []
            status_code: 200
          loop: "{{ user_details.results }}"
          when: item is defined and item.skipped is not defined
          register: license_assignments
      when: approval_decisions.results is defined and approval_decisions.results | length > 0
    
    - name: Notify users of request status
      debug:
        msg: "This would notify users of their request status via email or ServiceNow notification"
