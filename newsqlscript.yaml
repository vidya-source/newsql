---
- name: Fetch Pending ServiceNow Requests
  hosts: localhost
  gather_facts: no
  vars:
    servicenow_instance: "https://dev247928.service-now.com"
    servicenow_username: "admin"
    servicenow_password: "%ml4Vs9RXE/s"
    servicenow_table: "sc_request"
    tenant_id: "195e8969-c853-47b4-83d0-36e044d83923"
    client_id: "e2e46ae3-2dee-4eed-a074-ddffd760ab2b"
    client_secret: "{{client_secret}}"
    graph_api_endpoint: "https://graph.microsoft.com/v1.0"
    
  tasks:
    - name: Fetch pending requests from ServiceNow
      uri:
        url: "{{ servicenow_instance }}/api/now/table/{{ servicenow_table }}?sysparm_query=request_state=requested"
        method: GET
        user: "{{ servicenow_username }}"
        password: "{{ servicenow_password }}"
        force_basic_auth: yes
        return_content: yes
      register: servicenow_response

    - name: Store Requested License Type
      set_fact:
        requested_license_map: >-
          {{
            servicenow_response.json.result |
            items2dict(key_name='number', value_name='short_description')
          }}
          
    - name: Display request details
      debug:
        msg: |
          {% for request in servicenow_response.json.result %}
          Request Number: {{ request.get('number', 'N/A') }}
          User ID (Requested For): {{ request.get('requested_for', {}).get('value', 'Unknown') }}
          User ID (Opened By): {{ request.get('opened_by', {}).get('value', 'Unknown') }}
          Requested License Type: {{ request.get('short_description', 'Not Provided') }}
          Description: {{ request.get('description', 'Not Provided') }}
          ------------------------------------------------
          {% endfor %}
          
    - name: Get Azure access token
      uri:
        url: "https://login.microsoftonline.com/{{ tenant_id }}/oauth2/v2.0/token"
        method: POST
        body:
          client_id: "{{ client_id }}"
          client_secret: "{{ client_secret }}"
          scope: "https://graph.microsoft.com/.default"
          grant_type: "client_credentials"
        body_format: form-urlencoded
        return_content: yes
      register: azure_auth_response

    - name: Set Azure token
      set_fact:
        access_token: "{{ azure_auth_response.json.access_token }}"
    
    - name: Check License Availability in Azure
      uri:
        url: "{{ graph_api_endpoint }}/subscribedSkus"
        method: GET
        headers:
          Authorization: "Bearer {{ access_token }}"
          Content-Type: "application/json"
        return_content: yes
      register: azure_license_response
      
    - name: Add dummy license data for testing (remove this after u have real lic)
      set_fact:
        azure_license_response:
          json:
            value:
              - id: "dummy-license-1"
                skuPartNumber: "TEST_LICENSE_1"
                prepaidUnits:
                  enabled: 5
                consumedUnits: 3
              - id: "dummy-license-2"
                skuPartNumber: "TEST_LICENSE_2"
                prepaidUnits:
                  enabled: 10
                consumedUnits: 7
                
    - name: Display license availability
      debug:
        msg: "Available Licenses: {{ azure_license_response.json }}"

    - name: Process License Approval
      block:
        - name: Check License Availability
          set_fact:
            approval_status_map: >-
              {%- set status_map = {} -%}
              {%- for request_number, license_type in requested_license_map.items() -%}
                {%- set clean_license_type = license_type | lower | regex_replace(' requested', '') -%}
                {%- set found = false -%}
                {%- for license in azure_license_response.json.value -%}
                  {%- if license.skuPartNumber | lower == clean_license_type -%}
                    {%- set _ = status_map.update({request_number: 'approved'}) -%}
                    {%- set found = true -%}
                  {%- endif -%}
                {%- endfor -%}
                {%- if not found -%}
                  {%- set _ = status_map.update({request_number: 'rejected'}) -%}
                {%- endif -%}
              {%- endfor -%}
              {{ status_map }}

        - name: Update Approval Status in ServiceNow
          uri:
            url: "{{ servicenow_instance }}/api/now/table/{{ servicenow_table }}/{{ item.sys_id }}"
            method: PATCH
            user: "{{ servicenow_username }}"
            password: "{{ servicenow_password }}"
            force_basic_auth: yes
            headers:
              Content-Type: "application/json"
            body_format: json
            body:
              approval: "{{ approval_status_map[item.number] }}"
            return_content: yes
          loop: "{{ servicenow_response.json.result }}"
          when: 
            - approval_status_map is not none
            - item.number in approval_status_map
          register: approval_updates

        - name: Display Approval Results
          debug:
            msg: 
              - "Approval Status Updated: {{ approval_status_map }}"

    - name: Create user list for approved requests
      set_fact:
        approved_users: >-
          {%- set users = [] -%}
          {%- for request in servicenow_response.json.result -%}
            {%- if request.number in approval_status_map and approval_status_map[request.number] == 'approved' -%}
              {%- set user_info = {
                'request_id': request.sys_id,
                'request_number': request.number,
                'user_email': request.requested_for.email | default(''),
                'user_name': request.requested_for.name | default(''),
                'license_type': request.short_description | regex_replace(' requested', '')
              } -%}
              {%- set _ = users.append(user_info) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ users }}
      when: approval_status_map is defined

    - name: License Assignment Process
      block:
        # Add a task to check if the user exists first
        - name: Check if user exists
          uri:
            url: "{{ graph_api_endpoint }}/users/LA1@amitomar63gmail.onmicrosoft.com"
            method: GET
            headers:
              Authorization: "Bearer {{ access_token }}"
              Content-Type: "application/json"
            status_code: [200, 404]
            return_content: yes
          register: user_check
          ignore_errors: yes
        
        # Now the user creation code can use the user_check variable
        - name: Create User if Not Exists
          uri:
            url: "{{ graph_api_endpoint }}/users"
            method: POST
            headers:
              Authorization: "Bearer {{ access_token }}"
              Content-Type: "application/json"
            body:
              accountEnabled: true
              displayName: "LicenseAutomation"
              mailNickname: "LA1"
              userPrincipalName: "LA1@amitomar63gmail.onmicrosoft.com"
              passwordProfile:
                forceChangePasswordNextSignIn: true
                password: "HELLO@123"
            body_format: json
            status_code: [201]
          register: user_creation
          when: user_check.status == 404 or user_check is failed

        - name: Debug - Show User Creation Status
          debug:
            msg: "User Creation: {{ 'Successful' if user_creation.status == 201 else 'Unsuccessful or already exists' }}"
          when: user_check.status == 404 or user_check is failed
        
        # Get user ID for license assignment
        - name: Get User ID
          set_fact:
            user_id: "{{ user_creation.json.id | default('') }}"
          when: user_creation.status is defined and user_creation.status == 201
        
        - name: Get User ID for existing user
          set_fact:
            user_id: "{{ user_check.json.id | default('') }}"
          when: user_check.status is defined and user_check.status == 200
        
        # Create a simplified license assignment list
        - name: Create license assignment list
          set_fact:
            license_assignments: >-
              {%- set assignments = [] -%}
              {%- for license in azure_license_response.json.value -%}
                {%- set assignment = {
                  'user_id': user_id,
                  'license_id': license.id,
                  'license_type': license.skuPartNumber
                } -%}
                {%- set _ = assignments.append(assignment) -%}
              {%- endfor -%}
              {{ assignments }}
          when: user_id is defined

        # Assign licenses to the user
        - name: Assign licenses to user
          uri:
            url: "{{ graph_api_endpoint }}/users/{{ user_id }}/assignLicense"
            method: POST
            headers:
              Authorization: "Bearer {{ access_token }}"
              Content-Type: "application/json"
            body_format: json
            body:
              addLicenses:
                - skuId: "{{ item.license_id }}"
              removeLicenses: []
            status_code: [200, 201]
            return_content: yes
          register: license_assignment_result
          loop: "{{ license_assignments }}"
          when: user_id is defined and license_assignments is defined
          ignore_errors: yes

        # Display license assignment results
        - name: Generate license assignment report
          debug:
            msg: |
              License Assignment Summary:
              --------------------------------------
              User ID: {{ user_id | default('None') }}
              User Created: {{ user_creation.status == 201 | default(false) }}
              Licenses Assigned: {{ license_assignment_result.results | selectattr('status', 'in', [200, 201]) | list | length | default(0) }}
              
              Details:
              {% for assignment in license_assignments | default([]) %}
              - License ID: {{ assignment.license_id }}, Type: {{ assignment.license_type }}
              {% endfor %}
          when: license_assignments is defined
