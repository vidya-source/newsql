---
- name: Check MS SQL Server Health
  hosts: 10.112.0.10
  gather_facts: no
  vars:
    sql_instance: "10.112.0.10"
    sql_user: "{{ sql_user }}"
    sql_password: "{{ sql_password }}"
  tasks:

    # ‚úÖ Step 1: Check Disk Space on SQL Server Host
    - name: Get Disk Space Utilization
      win_shell: |
        try {
          $diskInfo = Get-PSDrive -PSProvider FileSystem | Select-Object Name, Used, Free, @{Name="FreePercent"; Expression={($_.Free/($_.Used + $_.Free)) * 100}} | ConvertTo-Json -Compress
          if (-not $diskInfo) { Write-Output '[]' } else { Write-Output $diskInfo }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: disk_space
      ignore_errors: yes

    # ‚úÖ Step 2: Database Space Utilization
    - name: Get Database Space Utilization
      win_shell: |
        try {
          $query = "SELECT DB_NAME(database_id) AS DatabaseName, SUM(size * 8) / 1024 AS SizeMB FROM sys.master_files GROUP BY database_id;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: db_space
      ignore_errors: yes

    # ‚úÖ Step 3: Database Health Check
    - name: Get Database Health
      win_shell: |
        try {
          $query = "SELECT db.name AS DatabaseName, db.state_desc AS Status, 
                   (SELECT COUNT(*) FROM sys.dm_exec_requests r WHERE r.database_id = db.database_id) AS ActiveRequests,
                   (SELECT COUNT(*) FROM sys.dm_exec_sessions s WHERE s.is_user_process = 1 AND s.database_id = db.database_id) AS ActiveUserConnections,
                   (SELECT COUNT(*) FROM sys.dm_os_waiting_tasks w JOIN sys.dm_exec_sessions s ON w.session_id = s.session_id WHERE s.database_id = db.database_id) AS PendingRequests,
                   (SELECT COUNT(*) FROM sys.dm_os_performance_counters WHERE counter_name = 'Processor Queue Length') AS CPUQueueLength 
                   FROM sys.databases db;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: db_health
      ignore_errors: yes

    # ‚úÖ Step 4: Check for Deadlocks
    - name: Check for Deadlocks
      win_shell: |
        try {
          $query = "SELECT COUNT(*) AS Deadlocks FROM sys.dm_tran_locks WHERE request_status = 'WAIT';"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[{"Deadlocks": 0}]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Deadlocks": "Error"}]'
        }
      register: deadlocks
      ignore_errors: yes

    # ‚úÖ Step 5: Blocking Sessions Analysis
    - name: Check for Blocking Sessions
      win_shell: |
        try {
          $query = "SELECT blocking_session_id, wait_type, wait_time, last_wait_type
                   FROM sys.dm_exec_requests WHERE blocking_session_id IS NOT NULL;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: blocking_sessions
      ignore_errors: yes

    # ‚úÖ Step 6: Get SQL Server Error Logs
    - name: Get SQL Server Error Logs
      win_shell: |
        try {
          $query = "EXEC xp_readerrorlog 0, 1, 'Error';"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: sql_logs
      ignore_errors: yes

    # ‚úÖ Step 7: Get SQL Agent Job Activities
    - name: Get SQL Agent Job Activities
      win_shell: |
        try {
          $query = "SELECT j.job_id, j.name, j.enabled, MAX(h.run_status) AS last_run_status
                   FROM msdb.dbo.sysjobs j
                   LEFT JOIN msdb.dbo.sysjobhistory h ON j.job_id = h.job_id
                   WHERE h.step_id = 0
                   GROUP BY j.job_id, j.name, j.enabled;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: job_activities
      ignore_errors: yes

    # ‚úÖ Convert Outputs to JSON
    - name: Convert Outputs to JSON
      set_fact:
        disk_space_fact: "{{ (disk_space.stdout | from_json) if disk_space.stdout is not none else [] }}"
        db_space_fact: "{{ (db_space.stdout | from_json) if db_space.stdout is not none else [] }}"
        db_health_fact: "{{ (db_health.stdout | from_json) if db_health.stdout is not none else [] }}"
        deadlocks_fact: "{{ (deadlocks.stdout | from_json) if deadlocks.stdout is not none else {'Deadlocks': 0} }}"
        blocking_fact: "{{ (blocking_sessions.stdout | from_json) if blocking_sessions.stdout is not none else [] }}"
        sql_logs_fact: "{{ (sql_logs.stdout | from_json) if sql_logs.stdout is not none else [] }}"
        job_activities_fact: "{{ (job_activities.stdout | from_json) if job_activities.stdout is not none else [] }}"

    # ‚úÖ Display Results
    - name: Display Formatted Results
      debug:
        msg: |
          üñ•Ô∏è **Disk Space Utilization:**
          {% for disk in disk_space_fact if disk.Name is defined %}
           - Drive {{ disk.Name }}: {{ disk.FreePercent | default(0) | round(2) }}% Free
          {% endfor %}
          üõë **Deadlocks:** {{ deadlocks_fact.Deadlocks }}
          üîÑ **Blocking Sessions:**
          {% for block in blocking_fact %}
           - Session {{ block.blocking_session_id }}: {{ block.wait_type }}
          {% endfor %}
          üìú **SQL Server Logs (Errors):**
          {% for log in sql_logs_fact %}
           - {{ log }}
          {% endfor %}
