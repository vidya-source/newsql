---
- name: Check MS SQL Server Health & Auto-Recover Databases
  hosts: 10.112.0.10
  gather_facts: no

  vars:
    sql_instance: "10.112.0.10"
    sql_user: "{{ sql_user }}"
    sql_password: "{{ sql_password }}"

  tasks:
    - name: Get Database Health
      win_shell: |
        try {
          $query = "SELECT db.name AS DatabaseName, db.state_desc AS Status FROM sys.databases db;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: db_health
      ignore_errors: yes

    - name: Check Offline Database State
      win_shell: |
        try {
          $query = "SELECT name, state_desc FROM sys.databases WHERE state_desc != 'ONLINE';"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: offline_db_state
      ignore_errors: yes

    - name: Get Database Space Utilization
      win_shell: |
        try {
          $query = "SELECT DB_NAME(database_id) AS DatabaseName, SUM(size * 8) / 1024 AS SizeMB FROM sys.master_files GROUP BY database_id;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: db_space
      ignore_errors: yes

    - name: Check for Deadlocks
      win_shell: |
        try {
          $query = "SELECT COUNT(*) AS Deadlocks FROM sys.dm_tran_locks WHERE request_status = 'WAIT';"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[{"Deadlocks": 0}]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Deadlocks": "Error"}]'
        }
      register: deadlocks
      ignore_errors: yes

    - name: Get SQL Agent Job Activities
      win_shell: |
        try {
          $query = "SELECT j.job_id, j.name, j.enabled, MAX(h.run_status) AS last_run_status
                    FROM msdb.dbo.sysjobs j
                    LEFT JOIN msdb.dbo.sysjobhistory h ON j.job_id = h.job_id
                    WHERE h.step_id = 0
                    GROUP BY j.job_id, j.name, j.enabled;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: job_activities
      ignore_errors: yes

    - name: Convert Outputs to JSON
      set_fact:
        db_health_fact: "{{ db_health.stdout | from_json | default([]) }}"
        offline_db_state_fact: "{{ offline_db_state.stdout | from_json | default([]) }}"
        db_space_fact: "{{ db_space.stdout | from_json | default([]) }}"
        deadlocks_fact: "{{ deadlocks.stdout | from_json | default({'Deadlocks': 0}) }}"
        job_activities_fact: "{{ job_activities.stdout | from_json | default([]) }}"

    - name: Attempt to Bring Offline Databases Online
      win_shell: |
        try {
          {% for db in offline_db_state_fact %}
            {% if db.state_desc == "OFFLINE" %}
              ALTER DATABASE {{ db.name }} SET ONLINE;
            {% endif %}
          {% endfor %}
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      when: offline_db_state_fact | length > 0
      register: online_attempt
      ignore_errors: yes

    - name: Run DBCC CHECKDB on SUSPECT Databases
      win_shell: |
        try {
          {% for db in offline_db_state_fact %}
            {% if db.state_desc == "SUSPECT" %}
              DBCC CHECKDB('{{ db.name }}') WITH NO_INFOMSGS, ALL_ERRORMSGS;
            {% endif %}
          {% endfor %}
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      when: offline_db_state_fact | length > 0
      register: dbcc_check
      ignore_errors: yes

    - name: Complete Restore for RESTORING Databases
      win_shell: |
        try {
          {% for db in offline_db_state_fact %}
            {% if db.state_desc == "RESTORING" %}
              RESTORE DATABASE {{ db.name }} WITH RECOVERY;
            {% endif %}
          {% endfor %}
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      when: offline_db_state_fact | length > 0
      register: restore_attempt
      ignore_errors: yes

    - name: Display Formatted Results with Troubleshooting & Auto-Recovery Status
      debug:
        msg: |
          🩺 **Database Health Check**
          {% for item in db_health_fact %}
            - Database: {{ item.DatabaseName }} | Status: {{ item.Status }}
            {% if item.Status != 'ONLINE' %}
              🚨 **Troubleshooting & Auto-Recovery Actions Taken**:
              {% if item.Status == "OFFLINE" %}
                - 🔄 Attempted to bring it online. Check logs for success.
              {% elif item.Status == "SUSPECT" %}
                - 🛠 Ran `DBCC CHECKDB({{ item.DatabaseName }})`. Check logs for corruption details.
              {% elif item.Status == "RESTORING" %}
                - ⏳ Ran `RESTORE DATABASE {{ item.DatabaseName }} WITH RECOVERY`. Check logs to confirm completion.
              {% else %}
                - ⚠️ Further investigation required. Check SQL logs.
              {% endif %}
            {% endif %}
          {% endfor %}

          📊 **Database Space Utilization**
          {% for db in db_space_fact %}
            - {{ db.DatabaseName }}: {{ db.SizeMB }} MB
          {% endfor %}

          🚨 **Deadlock Check**
          - {% if (deadlocks_fact.Deadlocks | default(0) | int) > 0 %}
            ❌ {{ deadlocks_fact.Deadlocks }} deadlocks detected!
          {% else %}
            ✅ No deadlocks detected.
          {% endif %}

          🔄 **SQL Agent Job Failures**
          - ✅ No job failures detected.
