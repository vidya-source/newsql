---
- name: Check MS SQL Server Health & Troubleshoot
  hosts: 10.112.0.10
  gather_facts: no

  vars:
    sql_instance: "10.112.0.10"
    sql_user: "{{ sql_user }}"
    sql_password: "{{ sql_password }}"

  tasks:
    - name: Get Database Space Utilization
      win_shell: |
        try {
          $query = "SELECT DB_NAME(database_id) AS DatabaseName, SUM(size * 8) / 1024 AS SizeMB FROM sys.master_files GROUP BY database_id;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: db_space
      ignore_errors: yes

    - name: Get Database Health
      win_shell: |
        try {
          $query = "SELECT db.name AS DatabaseName, db.state_desc AS Status FROM sys.databases db;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: db_health
      ignore_errors: yes

    - name: Check for Deadlocks
      win_shell: |
        try {
          $query = "SELECT COUNT(*) AS Deadlocks FROM sys.dm_exec_requests WHERE blocking_session_id <> 0;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[{"Deadlocks": 0}]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Deadlocks": "Error"}]'
        }
      register: deadlocks
      ignore_errors: yes

    - name: Get SQL Agent Job Failures
      win_shell: |
        try {
          $query = "SELECT j.name, h.run_status FROM msdb.dbo.sysjobs j 
                    JOIN msdb.dbo.sysjobhistory h ON j.job_id = h.job_id 
                    WHERE h.step_id = 0 AND h.run_status NOT IN (1);"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: job_failures
      ignore_errors: yes

    - name: Convert Outputs to JSON
      set_fact:
        db_space_fact: "{{ (db_space.stdout | from_json) if db_space.stdout is not none else [] }}"
        db_health_fact: "{{ (db_health.stdout | from_json) if db_health.stdout is not none else [] }}"
        deadlocks_fact: "{{ (deadlocks.stdout | from_json) if deadlocks.stdout is not none else {'Deadlocks': 0} }}"
        job_failures_fact: "{{ (job_failures.stdout | from_json) if job_failures.stdout is not none else [] }}"

    - name: Display Formatted Results with Troubleshooting
      debug:
        msg: |
          ü©∫ **Database Health Check**
          {% for item in db_health_fact %}
            - Database: {{ item.DatabaseName }} | Status: {{ item.Status }}
            {% if item.Status != 'ONLINE' %}
              üö® Troubleshooting: The database is in {{ item.Status }} state. Check the SQL logs and event viewer.
              Possible Fixes:
                - Use DBCC CHECKDB to identify corruption.
                - Check SQL Server service status.
                - Restore from a backup if necessary.
            {% endif %}
          {% endfor %}

          üìä **Database Space Utilization**
          {% for item in db_space_fact %}
            - {{ item.DatabaseName }}: {{ item.SizeMB }} MB
            {% if item.SizeMB | int > 50000 %}
              ‚ö†Ô∏è **Warning**: Large database detected. Consider adding storage or shrinking the database.
              Possible Fixes:
                - Check for unused indexes or large log files.
                - Use `DBCC SHRINKDATABASE` cautiously.
            {% endif %}
          {% endfor %}

          üö® **Deadlock Check**
          {% if deadlocks_fact.Deadlocks | int > 0 %}
            - ‚ùå **Deadlocks detected: {{ deadlocks_fact.Deadlocks }}**. Investigate blocking queries.
            Troubleshooting Steps:
              1. Run `sp_who2` to find blocking sessions.
              2. Use `DBCC TRACEON (1222, -1);` to capture deadlock details.
              3. Optimize queries to reduce contention.
          {% else %}
            - ‚úÖ No deadlocks detected.
          {% endif %}

          üîÑ **SQL Agent Job Failures**
          {% for job in job_failures_fact %}
            - ‚ùå Job "{{ job.name }}" failed.
            Troubleshooting Steps:
              1. Check SQL Server Agent logs.
              2. Look at `msdb.dbo.sysjobhistory` for error details.
              3. Ensure job owner has necessary permissions.
          {% else %}
            - ‚úÖ No job failures detected.
          {% endfor %}
