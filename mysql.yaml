---
- name: Check MS SQL Server Health
  hosts: 10.112.0.10
  gather_facts: no
  vars:
    sql_instance: "10.112.0.10"
    sql_user: "{{sql_user}}"
    sql_password: "{{sql_password}}"
  tasks:
    - name: Get Database Space Utilization
      win_shell: |
        try {
          $query = "SELECT DB_NAME(database_id) AS DatabaseName, SUM(size * 8) / 1024 AS SizeMB FROM sys.master_files GROUP BY database_id;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: db_space
      ignore_errors: yes
    - name: Get Database Health
      win_shell: |
        try {
          $query = "SELECT db.name AS DatabaseName,db.state_desc AS Status, (SELECT COUNT(*) FROM sys.dm_exec_requests r WHERE r.database_id = db.database_id) AS ActiveRequests,(SELECT COUNT(*) FROM sys.dm_exec_sessions s WHERE s.is_user_process = 1 AND s.database_id = db.database_id) AS ActiveUserConnections,(SELECT COUNT(*) FROM sys.dm_os_waiting_tasks w JOIN sys.dm_exec_sessions s ON w.session_id = s.session_id WHERE s.database_id = db.database_id) AS PendingRequests, (SELECT COUNT(*) FROM sys.dm_os_performance_counters WHERE counter_name = 'Processor Queue Length') AS CPUQueueLength FROM sys.databases db;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: db_health
      ignore_errors: yes
    - name: Check for Deadlocks
      win_shell: |
        try {
          $query = "SELECT COUNT(*) AS Deadlocks FROM sys.dm_tran_locks WHERE request_status = 'WAIT';"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[{"Deadlocks": 0}]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Deadlocks": "Error"}]'
        }
      register: deadlocks
      ignore_errors: yes
    - name: Get SQL Agent Job Activities
      win_shell: |
        try {
          $query = "SELECT j.job_id, j.name, j.enabled,
               MAX(h.run_status) AS last_run_status
               FROM msdb.dbo.sysjobs j
               LEFT JOIN msdb.dbo.sysjobhistory h ON j.job_id = h.job_id
               WHERE h.step_id = 0
               GROUP BY j.job_id, j.name, j.enabled;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: job_activities
      ignore_errors: yes
    - name: Convert Outputs to JSON
      set_fact:
        db_space_fact: "{{ (db_space.stdout | from_json) if db_space.stdout is not none else [] }}"
        db_health_fact: "{{ (db_health.stdout | from_json) if db_health.stdout is not none else [] }}"
        deadlocks_fact: "{{ (deadlocks.stdout | from_json) if deadlocks.stdout is not none else {'Deadlocks': 0} }}"
        job_activities_fact: "{{ (job_activities.stdout | from_json) if job_activities.stdout is not none else [] }}"
    - name: Display Formatted Results
      debug:
        msg: |
          üìä Database Space Utilization:
          {% for item in db_space_fact | default([]) if item.DatabaseName is defined and item.SizeMB is defined %}
           - {{ item.DatabaseName }}: {{ item.SizeMB }} MB
          {% endfor %}
          üö® Deadlocks:
          {% if (deadlocks_fact.Deadlocks | default(0) | int) > 0 %}
           - {{ deadlocks_fact.Deadlocks }} deadlocks detected!
          {% else %}
           - No deadlocks detected
          {% endif %}
          [‚ÑπÔ∏è] Job activities query returned {{ job_activities_fact | default([]) | length }} rows.
          üõ† SQL Server Agent Job Activities:
          {% if job_activities_fact.name is defined and job_activities_fact.enabled is defined and job_activities_fact.last_run_status is defined %}
           - Job: {{ job_activities_fact.name }} | Enabled: {{ job_activities_fact.enabled }} | Last Outcome: 
             {% if job_activities_fact.last_run_status | default(-1) == 1 %}
               Succeeded
             {% elif job_activities_fact.last_run_status | default(-1) == 0 %}
               Failed
             {% elif job_activities_fact.last_run_status | default(-1) == 2 %}
               Retry
             {% elif job_activities_fact.last_run_status | default(-1) == 3 %}
               Canceled
             {% else %}
               Unknown
             {% endif %}
          {% else %}
            [‚ùå] No job activities found or missing required fields.
          {% endif %}
          ü©∫ Database Health Check:
          {% if db_health_fact is defined and db_health_fact | length > 0 %}
            {% for item in db_health_fact | default([]) %}
               - Database: {{ item.DatabaseName | default([]) }}
                 - Status: {{ item.Status | default([]) }}
                 - Active Requests: {{ item.ActiveRequests | default(0) }}
                 - Active User Connections: {{ item.ActiveUserConnections | default(0) }}
                 - Pending Requests: {{ item.PendingRequests | default(0) }}
                 - CPU Queue Length: {{ item.CPUQueueLength | default(0) }}
            {% endfor %}
          {% else %}
            [‚ùå] No database health data available.
          {% endif %}
