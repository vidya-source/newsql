---
- name: Check MS SQL Server Health
  hosts: 10.112.0.10
  gather_facts: no
  vars:
    sql_instance: "10.112.0.10"
    sql_user: "{{ sql_user }}"
    sql_password: "{{ sql_password }}"
  tasks:
    - name: Get Disk Space Utilization
      win_shell: |
        try {
          $disks = Get-WmiObject Win32_LogicalDisk | Select-Object DeviceID, VolumeName, Size, FreeSpace | ConvertTo-Json -Compress
          if (-not $disks) { Write-Output '[]' } else { Write-Output $disks }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: disk_space
      ignore_errors: yes

    - name: Get Database Space Utilization
      win_shell: |
        try {
          $query = "SELECT DB_NAME(database_id) AS DatabaseName, SUM(size * 8) / 1024 AS SizeMB FROM sys.master_files GROUP BY database_id;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: db_space
      ignore_errors: yes

    - name: Get Database Health
      win_shell: |
        try {
          $query = "SELECT db.name AS DatabaseName, db.state_desc AS Status, 
                           (SELECT COUNT(*) FROM sys.dm_exec_sessions WHERE is_user_process = 1 AND database_id = db.database_id) AS ActiveUserConnections
                    FROM sys.databases db;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: db_health
      ignore_errors: yes

    - name: Check for Deadlocks
      win_shell: |
        try {
          $query = "SELECT COUNT(*) AS Deadlocks FROM sys.dm_tran_locks WHERE request_status = 'WAIT';"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[{"Deadlocks": 0}]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Deadlocks": "Error"}]'
        }
      register: deadlocks
      ignore_errors: yes

    - name: Check for Blocking Sessions
      win_shell: |
        try {
          $query = "SELECT blocking_session_id, waiting_session_id, wait_type, wait_time, blocking_session_id 
                    FROM sys.dm_exec_requests WHERE blocking_session_id <> 0;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: blocking_sessions
      ignore_errors: yes

    - name: Get SQL Server Error Logs
      win_shell: |
        try {
          $query = "EXEC xp_readerrorlog 0, 1, 'error';"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: sql_logs
      ignore_errors: yes

    - name: Get SQL Agent Job Activities
      win_shell: |
        try {
          $query = "SELECT j.name, j.enabled, MAX(h.run_status) AS last_run_status
                    FROM msdb.dbo.sysjobs j
                    LEFT JOIN msdb.dbo.sysjobhistory h ON j.job_id = h.job_id
                    WHERE h.step_id = 0 GROUP BY j.name, j.enabled;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: job_activities
      ignore_errors: yes

    - name: Convert Outputs to JSON
      set_fact:
        disk_space_fact: "{{ (disk_space.stdout | from_json) if disk_space.stdout is not none else [] }}"
        db_space_fact: "{{ (db_space.stdout | from_json) if db_space.stdout is not none else [] }}"
        db_health_fact: "{{ (db_health.stdout | from_json) if db_health.stdout is not none else [] }}"
        deadlocks_fact: "{{ (deadlocks.stdout | from_json) if deadlocks.stdout is not none else {'Deadlocks': 0} }}"
        blocking_sessions_fact: "{{ (blocking_sessions.stdout | from_json) if blocking_sessions.stdout is not none else [] }}"
        sql_logs_fact: "{{ (sql_logs.stdout | from_json) if sql_logs.stdout is not none else [] }}"
        job_activities_fact: "{{ (job_activities.stdout | from_json) if job_activities.stdout is not none else [] }}"

    - name: Display Formatted Results
      debug:
        msg: |
          üñ•Ô∏è **Disk Space Utilization:**
          {% for disk in disk_space_fact %}
            - {{ disk.DeviceID }} ({{ disk.VolumeName | default('No Name') }}) ‚Üí Free: {{ ((disk.FreeSpace | int) / (1024*1024*1024)) | round(2) }} GB / Total: {{ ((disk.Size | int) / (1024*1024*1024)) | round(2) }} GB
          {% endfor %}
          
          üõë **Deadlocks:** {{ deadlocks_fact.Deadlocks | default(0) }}
          
          üîÑ **Blocking Sessions:**
          {% for block in blocking_sessions_fact %}
            - Blocked Session: {{ block.waiting_session_id }}, Blocker: {{ block.blocking_session_id }}, Wait Type: {{ block.wait_type }}, Wait Time: {{ block.wait_time }}
          {% else %}
            - No blocking detected
          {% endfor %}

          üìú **SQL Server Logs (Errors):**
          {% for log in sql_logs_fact %}
            - {{ log }}
          {% else %}
            - No critical errors found
          {% endfor %}

          üõ† **SQL Agent Job Activities:**
          {% for job in job_activities_fact %}
            - {{ job.name }} (Enabled: {{ 'Yes' if job.enabled else 'No' }}) ‚Üí Last Run: 
              {% if job.last_run_status == 1 %}‚úÖ Succeeded
              {% elif job.last_run_status == 0 %}‚ùå Failed
              {% else %}‚ùì Unknown
              {% endif %}
          {% else %}
            - No job activities found
          {% endfor %}
