---
- name: Check MS SQL Server Health
  hosts: 10.112.0.10
  gather_facts: no
  vars:
    sql_instance: "10.112.0.10"
    sql_user: "{{ sql_user }}"
    sql_password: "{{ sql_password }}"

  tasks:
    - name: Get Disk Space Utilization
      win_shell: |
        try {
          $result = Get-WmiObject Win32_LogicalDisk | Select-Object DeviceID, Size, FreeSpace | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: disk_space
      ignore_errors: yes

    - name: Get Database Space Utilization
      win_shell: |
        try {
          $query = "SELECT DB_NAME(database_id) AS DatabaseName, SUM(size * 8) / 1024 AS SizeMB FROM sys.master_files GROUP BY database_id;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: db_space
      ignore_errors: yes

    - name: Get Database Health
      win_shell: |
        try {
          $query = "SELECT db.name AS DatabaseName, db.state_desc AS Status, 
                    (SELECT COUNT(*) FROM sys.dm_exec_requests r WHERE r.database_id = db.database_id) AS ActiveRequests, 
                    (SELECT COUNT(*) FROM sys.dm_exec_sessions s WHERE s.is_user_process = 1 AND s.database_id = db.database_id) AS ActiveUserConnections, 
                    (SELECT COUNT(*) FROM sys.dm_os_waiting_tasks w JOIN sys.dm_exec_sessions s ON w.session_id = s.session_id WHERE s.database_id = db.database_id) AS PendingRequests, 
                    (SELECT COUNT(*) FROM sys.dm_os_performance_counters WHERE counter_name = 'Processor Queue Length') AS CPUQueueLength 
                    FROM sys.databases db;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: db_health
      ignore_errors: yes

    - name: Check for Deadlocks
      win_shell: |
        try {
          $query = "SELECT COUNT(*) AS Deadlocks FROM sys.dm_tran_locks WHERE request_status = 'WAIT';"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[{"Deadlocks": 0}]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Deadlocks": "Error"}]'
        }
      register: deadlocks
      ignore_errors: yes

    - name: Check for Blocking Sessions
      win_shell: |
        try {
          $query = "SELECT blocking_session_id AS BlockerSession, wait_type AS WaitType FROM sys.dm_exec_requests WHERE blocking_session_id <> 0;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: blocking_sessions
      ignore_errors: yes

    - name: Get SQL Server Error Logs
      win_shell: |
        try {
          $result = Get-EventLog -LogName Application -Source "MSSQLSERVER" -EntryType Error -Newest 10 | Select-Object TimeGenerated, Message | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: sql_logs
      ignore_errors: yes

    - name: Get SQL Agent Job Activities
      win_shell: |
        try {
          $query = "SELECT j.job_id, j.name, j.enabled, 
                   MAX(h.run_status) AS last_run_status 
                   FROM msdb.dbo.sysjobs j 
                   LEFT JOIN msdb.dbo.sysjobhistory h ON j.job_id = h.job_id 
                   WHERE h.step_id = 0 
                   GROUP BY j.job_id, j.name, j.enabled;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: job_activities
      ignore_errors: yes

    - name: Convert Outputs to JSON
      set_fact:
        disk_space_fact: "{{ disk_space.stdout | default('[]') | from_json }}"
        db_space_fact: "{{ db_space.stdout | default('[]') | from_json }}"
        db_health_fact: "{{ db_health.stdout | default('[]') | from_json }}"
        deadlocks_fact: "{{ deadlocks.stdout | default('{\"Deadlocks\": 0}') | from_json }}"
        blocking_sessions_fact: "{{ blocking_sessions.stdout | default('[]') | from_json }}"
        sql_logs_fact: "{{ sql_logs.stdout | default('[]') | from_json }}"
        job_activities_fact: "{{ job_activities.stdout | default('[]') | from_json }}"

    - name: Debug Disk Space Output
      debug:
        var: disk_space_fact

    - name: Display Formatted Results
      debug:
        msg: |
          üñ•Ô∏è **Disk Space Utilization:**
          {% for item in disk_space_fact %}
           - Drive {{ item.DeviceID }}: {{ ((item.FreeSpace | int * 100) / (item.Size | int)) | round(2) }}% Free
          {% endfor %}
          
          üìä **Database Space Utilization:**
          {% for item in db_space_fact %}
           - {{ item.DatabaseName }}: {{ item.SizeMB }} MB
          {% endfor %}

          üö® **Deadlocks:** {{ deadlocks_fact.Deadlocks }}

          üîÑ **Blocking Sessions:**
          {% for item in blocking_sessions_fact %}
           - Session {{ item.BlockerSession }}: {{ item.WaitType }}
          {% endfor %}

          üìú **SQL Server Logs (Errors):**
          {% for item in sql_logs_fact %}
           - {{ item.TimeGenerated }}: {{ item.Message }}
          {% endfor %}

          üõ† **SQL Server Agent Job Activities:**
          {% for item in job_activities_fact %}
           - Job: {{ item.name }} | Enabled: {{ item.enabled }} | Last Run Status: {{ item.last_run_status }}
          {% endfor %}
