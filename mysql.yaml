---
- name: SQL Server Health Check and Maintenance
  hosts: 10.112.0.10
  gather_facts: no
  vars:
    sql_instance: "10.112.0.10"
    sql_user: "{{ sql_user }}"
    sql_password: "{{ sql_password }}"
 
  tasks:
    - name: Get Disk Space Utilization
      win_shell: |
        try {
          $disks = Get-WmiObject Win32_LogicalDisk | Select-Object DeviceID, VolumeName, Size, FreeSpace | ConvertTo-Json -Compress -Depth 2
          if (-not $disks) { Write-Output '[]' } else { Write-Output $disks }
        } catch {
          Write-Output '[{"Error": "Failed to retrieve disk info"}]'
        }
      register: disk_space
      ignore_errors: yes
 
    - name: Get Database Space Utilization
      win_shell: |
        try {
          $query = "SELECT DB_NAME(database_id) AS DatabaseName, SUM(size * 8) / 1024 AS SizeMB FROM sys.master_files GROUP BY database_id;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "Failed to retrieve database space info"}]'
        }
      register: db_space
      ignore_errors: yes
 
    - name: Get Database Health
      win_shell: |
        try {
          $query = "SELECT db.name AS DatabaseName, db.state_desc AS Status, (SELECT COUNT(*) FROM sys.dm_exec_requests r WHERE r.database_id = db.database_id) AS ActiveRequests, (SELECT COUNT(*) FROM sys.dm_exec_sessions s WHERE s.is_user_process = 1 AND s.database_id = db.database_id) AS ActiveUserConnections, (SELECT COUNT(*) FROM sys.dm_os_waiting_tasks w JOIN sys.dm_exec_sessions s ON w.session_id = s.session_id WHERE s.database_id = db.database_id) AS PendingRequests, (SELECT COUNT(*) FROM sys.dm_os_performance_counters WHERE counter_name = 'Processor Queue Length') AS CPUQueueLength FROM sys.databases db;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: db_health
      ignore_errors: yes
 
    - name: Check for Deadlocks
      win_shell: |
        try {
          $query = "SELECT COUNT(*) AS Deadlocks FROM sys.dm_tran_locks WHERE request_status = 'WAIT';"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[{"Deadlocks": 0}]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Deadlocks": "Error"}]'
        }
      register: deadlocks
      ignore_errors: yes
 
    - name: Get SQL Agent Job Activities
      win_shell: |
        try {
          $query = "SELECT j.job_id, j.name, j.enabled, MAX(h.run_status) AS last_run_status FROM msdb.dbo.sysjobs j LEFT JOIN msdb.dbo.sysjobhistory h ON j.job_id = h.job_id WHERE h.step_id = 0 GROUP BY j.job_id, j.name, j.enabled;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: job_activities
      ignore_errors: yes
    - name: Generate SQL Server Error for Testing
      win_shell: |
        try {
          Invoke-Sqlcmd -Query "RAISERROR ('Test error for Ansible detection', 16, 1) WITH LOG;" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate
          Write-Output '[{"Success": "Test error generated successfully"}]'
        } catch {
          Write-Output '[{"Error": "Failed to generate test error"}]'
        }
      register: test_error
      ignore_errors: yes
      failed_when: false
    
    - name: Display Test Error Result
      debug:
        msg: "{{ test_error.stdout }}"

 
    - name: Check SQL Server Error Log for Issues
      win_shell: |
        try {
          $query = "SELECT TOP 10 logdate, processinfo, text FROM sys.fn_get_audit_file('C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\Log\*.sqlaudit', DEFAULT, DEFAULT) WHERE text LIKE '%error%' OR text LIKE '%failed%' OR text LIKE '%severity%' ORDER BY logdate DESC;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: error_logs
      ignore_errors: yes
 
    - name: Convert Outputs to JSON
      set_fact:
        db_space_fact: "{{ db_space.stdout | default('[]') | from_json }}"
        db_health_fact: "{{ db_health.stdout | default('[]') | from_json }}"
        deadlocks_fact: "{{ deadlocks.stdout | default('[]') | from_json }}"
        job_activities_fact: "{{ job_activities.stdout | default('[]') | from_json }}"
        disk_space_fact: "{{ disk_space.stdout | default('[]') | from_json }}"
        error_logs_fact: "{{ error_logs.stdout | default('[]') | from_json }}"
    
    - name: Display Formatted Results
      debug:
        msg: |
          💾 Disk Space:
          {% for item in disk_space_fact if item is mapping and 'DeviceID' in item and 'FreeSpace' in item %}
            - Volume: {{ item.DeviceID }} | Free Space: {{ (item.FreeSpace | int / 1073741824) | round(2) }} GB
          {% else %}
            - No valid disk space data available.
          {% endfor %}
 
          📊 Database Space Utilization:
          {% for item in db_space_fact | default([]) if item.DatabaseName is defined and item.SizeMB is defined %}
           - {{ item.DatabaseName }}: {{ item.SizeMB }} MB
          {% endfor %}
          🚨 Deadlocks:
          {% if (deadlocks_fact.Deadlocks | default(0) | int) > 0 %}
           - {{ deadlocks_fact.Deadlocks }} deadlocks detected!
          {% else %}
           - No deadlocks detected
          {% endif %}
          [ℹ️] Job activities query returned {{ job_activities_fact | default([]) | length }} rows.
          🛠 SQL Server Agent Job Activities:
          {% if job_activities_fact.name is defined and job_activities_fact.enabled is defined and job_activities_fact.last_run_status is defined %}
           - Job: {{ job_activities_fact.name }} | Enabled: {{ job_activities_fact.enabled }} | Last Outcome: 
             {% if job_activities_fact.last_run_status | default(-1) == 1 %}
               Succeeded
             {% elif job_activities_fact.last_run_status | default(-1) == 0 %}
               Failed
             {% elif job_activities_fact.last_run_status | default(-1) == 2 %}
               Retry
             {% elif job_activities_fact.last_run_status | default(-1) == 3 %}
               Canceled
             {% else %}
               Unknown
             {% endif %}
          {% else %}
            [❌] No job activities found or missing required fields.
          {% endif %}
          🩺 Database Health Check:
          {% if db_health_fact is defined and db_health_fact | length > 0 %}
            {% for item in db_health_fact | default([]) %}
               - Database: {{ item.DatabaseName | default([]) }}
                 - Status: {{ item.Status | default([]) }}
                 - Active Requests: {{ item.ActiveRequests | default(0) }}
                 - Active User Connections: {{ item.ActiveUserConnections | default(0) }}
                 - Pending Requests: {{ item.PendingRequests | default(0) }}
                 - CPU Queue Length: {{ item.CPUQueueLength | default(0) }}
            {% endfor %}
          {% else %}
            [❌] No database health data available.
          {% endif %}
          
          📜 SQL Server Error Log:
          {% if error_logs_fact is defined and error_logs_fact | length > 0 %}
            {% for item in error_logs_fact | default([]) %}
              - Date: {{ item.logdate | default('Unknown') }}
                - Process: {{ item.processinfo | default('Unknown') }}
                - Message: {{ item.text | default('No message') | truncate(100) }}
            {% endfor %}
          {% else %}
            [ℹ️] No errors found in SQL Server logs or error log data not available.
          {% endif %}
          
    - name: Display SQL Server Issues and Troubleshooting Suggestions
      debug:
        msg: |
          🩺 **Database Health Check:**
          {% if db_health_fact is defined and db_health_fact | length > 0 %}
            {% for item in db_health_fact %}
              {% if item.Status != "ONLINE" %}
                - Database: {{ item.DatabaseName }}
                  - Status: {{ item.Status }}
                {% if item.Status == "OFFLINE" %}
                  🚨 **ALERT: Database {{ item.DatabaseName }} is OFFLINE!**
                  - Possible reasons:
                    - Manually taken offline
                    - Storage or corruption issues
                    - SQL Server restart
                  - Suggested Fix:
                    - `ALTER DATABASE {{ item.DatabaseName }} SET ONLINE;`
                    - Check storage space and error logs
                {% endif %}
              {% endif %}
            {% endfor %}
            {% if db_health_fact | selectattr('Status', 'ne', 'ONLINE') | list | length == 0 %}
              ✅ All databases are ONLINE.
            {% endif %}
          {% else %}
            ❌ No database health data available.
          {% endif %}
          
          💾 **Disk Space Check:**
          {% for item in disk_space_fact if item is mapping and 'DeviceID' in item and 'FreeSpace' in item %}
            {% set free_pct = (item.FreeSpace|float / item.Size|float * 100)|round(2) %}
            {% if free_pct < 10 %}
              🚨 **ALERT: Low disk space on {{ item.DeviceID }}!**
              - {{ free_pct }}% free ({{ (item.FreeSpace|int / 1073741824)|round(2) }} GB)
              - Suggested Fix:
                - Clean up log files, temp files
                - Review database file growth
                - Consider adding storage
            {% endif %}
          {% else %}
            ✅ All drives have sufficient disk space.
          {% endfor %}
          
          🔒 **Deadlock Check:**
          {% if (deadlocks_fact.Deadlocks|default(0)|int) > 0 %}
            🚨 **ALERT: {{ deadlocks_fact.Deadlocks }} deadlocks detected!**
            - Suggested Fix:
              - Review transaction isolation levels
              - Optimize queries with high lock duration
              - Consider using NOLOCK hint for read-only operations
          {% else %}
            ✅ No deadlocks detected.
          {% endif %}
    
          🧪 **Test Error Check:**
          {% if test_error is defined and test_error.stdout is defined %}
            {% if test_error.stdout is search('Test error generated successfully') %}
              🔔 Test error was successfully generated for monitoring validation.
              - This is an expected test condition to verify alert systems.
            {% else %}
              ❓ Test error generation status unknown.
            {% endif %}
          {% else %}
            ❌ No test error data available.
          {% endif %}
          
          📜 **Error Log Analysis:**
          {% if error_logs_fact is defined and error_logs_fact|length > 0 %}
            {% set error_found = false %}
            {% for item in error_logs_fact %}
              {% if item.text is defined and item.text|lower is search('severity: [1-9][0-9]') %}
                {% set error_found = true %}
                🚨 **ALERT: High severity error detected!**
                - {{ item.text|truncate(150) }}
                - Time: {{ item.logdate }}
                - Suggested Fix:
                  - Review SQL Server error log details
                  - Check for related issues in Windows Event Log
              {% endif %}
            {% endfor %}
            {% if not error_found %}
              ✅ No critical errors found in logs.
            {% endif %}
          {% else %}
            ✅ No errors found in SQL Server logs.
          {% endif %}
