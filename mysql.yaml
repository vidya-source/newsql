---
- name: SQL Server Health Check and Maintenance
  hosts: 10.112.0.10
  gather_facts: no
  vars:
    sql_instance: "10.112.0.10"
    sql_user: "{{ sql_user }}"
    sql_password: "{{ sql_password }}"

  tasks:
    - name: Get Disk Space Utilization
      win_shell: |
        try {
          $disks = Get-WmiObject Win32_LogicalDisk | Select-Object DeviceID, VolumeName, Size, FreeSpace | ConvertTo-Json -Compress -Depth 2
          if (-not $disks) { Write-Output '[]' } else { Write-Output $disks }
        } catch {
          Write-Output '[{"Error": "Failed to retrieve disk info"}]'
        }
      register: disk_space
      ignore_errors: yes

    - name: Get Database Space Utilization
      win_shell: |
        try {
          $query = "SELECT DB_NAME(database_id) AS DatabaseName, SUM(size * 8) / 1024 AS SizeMB FROM sys.master_files GROUP BY database_id;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "Failed to retrieve database space info"}]'
        }
      register: db_space
      ignore_errors: yes

    - name: Get Database Health
      win_shell: |
        try {
          $query = "SELECT db.name AS DatabaseName, db.state_desc AS Status, (SELECT COUNT(*) FROM sys.dm_exec_requests r WHERE r.database_id = db.database_id) AS ActiveRequests, (SELECT COUNT(*) FROM sys.dm_exec_sessions s WHERE s.is_user_process = 1 AND s.database_id = db.database_id) AS ActiveUserConnections, (SELECT COUNT(*) FROM sys.dm_os_waiting_tasks w JOIN sys.dm_exec_sessions s ON w.session_id = s.session_id WHERE s.database_id = db.database_id) AS PendingRequests, (SELECT COUNT(*) FROM sys.dm_os_performance_counters WHERE counter_name = 'Processor Queue Length') AS CPUQueueLength FROM sys.databases db;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: db_health
      ignore_errors: yes

    - name: Check for Deadlocks
      win_shell: |
        try {
          $query = "SELECT COUNT(*) AS Deadlocks FROM sys.dm_tran_locks WHERE request_status = 'WAIT';"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[{"Deadlocks": 0}]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Deadlocks": "Error"}]'
        }
      register: deadlocks
      ignore_errors: yes

    - name: Get SQL Agent Job Activities
      win_shell: |
        try {
          $query = "SELECT j.job_id, j.name, j.enabled, MAX(h.run_status) AS last_run_status FROM msdb.dbo.sysjobs j LEFT JOIN msdb.dbo.sysjobhistory h ON j.job_id = h.job_id WHERE h.step_id = 0 GROUP BY j.job_id, j.name, j.enabled;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: job_activities
      ignore_errors: yes

    - name: Check SQL Server Error Log for Issues
      win_shell: |
        try {
          $query = "SELECT TOP 10 logdate, processinfo, text FROM sys.fn_get_audit_file('C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\Log\*.sqlaudit', DEFAULT, DEFAULT) WHERE text LIKE '%error%' OR text LIKE '%failed%' OR text LIKE '%severity%' ORDER BY logdate DESC;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: sql_errors
      ignore_errors: yes

    - name: Convert Outputs to JSON
      set_fact:
        db_space_fact: "{{ db_space.stdout | default('[]') | from_json }}"
        db_health_fact: "{{ db_health.stdout | default('[]') | from_json }}"
        deadlocks_fact: "{{ deadlocks.stdout | default('[]') | from_json }}"
        job_activities_fact: "{{ job_activities.stdout | default('[]') | from_json }}"
        disk_space_fact: "{{ disk_space.stdout | default('[]') | from_json }}"
        sql_errors_fact: "{{ sql_errors.stdout | default('[]') | from_json }}"

    - name: Display SQL Server Issues and Troubleshooting Suggestions
      debug:
        msg: |
          ‚ö†Ô∏è **SQL Server Errors Detected:**
          {% if sql_errors_fact is defined and sql_errors_fact | length > 0 %}
            {% for error in sql_errors_fact %}
              - **Timestamp:** {{ error.logdate | default("N/A") }}
              - **Process:** {{ error.processinfo | default("N/A") }}
              - **Error Message:** {{ error.text | default("N/A") }}
              **üîß Suggested Troubleshooting Steps:**
              {% if 'login failed' in error.text | lower %}
                - Check SQL login credentials.
                - Verify if the login exists and is enabled (`SELECT * FROM sys.sql_logins`).
                - Ensure correct authentication mode is set (`SELECT SERVERPROPERTY('IsIntegratedSecurityOnly')`).
              {% elif 'deadlock' in error.text | lower %}
                - Identify deadlock victims (`SELECT * FROM sys.dm_tran_locks`).
                - Review long-running transactions.
                - Optimize indexing and query performance.
              {% elif 'severity 17' in error.text | lower %}
                - Indicates insufficient resources. Check available memory and disk space.
                - Review running processes with `sys.dm_exec_requests`.
              {% elif 'severity 20' in error.text | lower %}
                - Fatal error detected. Check error log for more details.
                - Restart SQL Server if necessary.
              {% else %}
                - Review the error message and check SQL documentation for resolution.
              {% endif %}
            {% endfor %}
          {% endif %}
          
          {% set offline_databases = [] %}
          {% for db in db_health_fact %}
            {% if db.Status == "OFFLINE" %}
              {% set offline_databases = offline_databases + [db] %}
            {% endif %}
          {% endfor %}
          
          {% if offline_databases | length > 0 %}
            {% for db in offline_databases %}
              üö® **CRITICAL: Database {{ db.DatabaseName }} is OFFLINE!**
              - **Status:** {{ db.Status }}
              - **Possible reasons:**
                - Manually taken offline
                - Storage or corruption issues
                - SQL Server restart
              - **Suggested Fix:**
                - `ALTER DATABASE {{ db.DatabaseName }} SET ONLINE;`
                - Check storage space and error logs
            {% endfor %}
          {% elif sql_errors_fact | length == 0 %}
            ‚úÖ No critical errors found in the SQL Server logs.
          {% endif %}

          ü©∫ **Database Health Check:**
          {% if db_health_fact is defined and db_health_fact | length > 0 %}
            {% for item in db_health_fact %}
              - Database: {{ item.DatabaseName }}
                - Status: {{ item.Status }}
              {% if item.Status == "OFFLINE" %}
                üö® **ALERT: Database {{ item.DatabaseName }} is OFFLINE!**
                - Possible reasons:
                  - Manually taken offline
                  - Storage or corruption issues
                  - SQL Server restart
                - Suggested Fix:
                  - `ALTER DATABASE {{ item.DatabaseName }} SET ONLINE;`
                  - Check storage space and error logs
              {% endif %}
            {% endfor %}
          {% else %}
            ‚ùå No database health data available.
          {% endif %}
